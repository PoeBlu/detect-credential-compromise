AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  Template to detect credential compromise via CloudWatch Events and expected IPs. What's in Your CloudWatch?
  Authored by Chris Farris <chris@chrisfarris.com>

Parameters:

  pDebug:
    Description: Enable Debugging in CloudWatchLogs
    Type: String
    Default: False

  pObjectKey:
    Description: Name of the S3 Object in the bucket with the expected IPs.
    Type: String
    Default: Instance-Data.json

  pReservedConcurrentExecutions:
    Description: Number of concurrent executions for the detect functions
    Type: Number
    Default: 100  # 10% of default limit of 1000

  pTopicArn:
    Description: ARN of the Topic which to send events to
    Type: String

  pTopicRegion:
    Description: Region where the Topic is.
    Type: String

  pCloudTrailLogGroupName:
    Description: LogGroup in CloudWatch logs to get the CloudTrail events
    Type: String
    Default: "CloudTrail/DefaultLogGroup"

Resources:

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref Bucket , /*]]
              - !Join ['', ['arn:aws:s3:::', !Ref Bucket ]]
          - Action:
            - s3:ListAllMyBuckets
            - s3:GetBucketLocation
            Effect: Allow
            Resource: '*'
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow
      # - PolicyName: GetMessages
      #   PolicyDocument:
      #     Version: '2012-10-17'
      #     Statement:
      #     - Resource: !GetAtt CloudWatchEventQueue.Arn
      #       Action:
      #       - sqs:*
      #       Effect: Allow
      - PolicyName: PublishEvents
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: !Ref pTopicArn
            Action:
            - sns:publish
            Effect: Allow
      - PolicyName: ReadKineses
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: !GetAtt CloudTrailStream.Arn
            Effect: Allow
            Action:
            - kinesis:DescribeStream
            - kinesis:DescribeStreamSummary
            - kinesis:GetRecords
            - kinesis:GetShardIterator
            - kinesis:ListShards
            - kinesis:ListStreams
            - kinesis:SubscribeToShard
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvent

  DetectFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub "${AWS::StackName}-detect"
      Description: Compare Cloudtrail Event Source IP to expected values
      Handler: detect-cwl.handler
      Runtime: python3.6
      Timeout: 60
      ReservedConcurrentExecutions: !Ref pReservedConcurrentExecutions
      Role: !GetAtt LambdaRole.Arn
      CodeUri: lambda/lambda-package.zip
      Environment:
        Variables:
          BUCKET: !Ref Bucket
          OBJECT: !Ref pObjectKey
          DEBUG: !Ref pDebug
          TOPICARN: !Ref pTopicArn
          TOPIC_REGION: !Ref pTopicRegion
      # Tags inherited from Stack

  InventoryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub "${AWS::StackName}-inventory"
      Description: Collect Instance IPs and NatGateway Addresses
      Handler: inventory.handler
      Runtime: python3.6
      Timeout: 150
      MemorySize: 768
      Role: !GetAtt LambdaRole.Arn
      CodeUri: lambda/lambda-package.zip
      Environment:
        Variables:
          BUCKET: !Ref Bucket
          OBJECT: !Ref pObjectKey
          DEBUG: !Ref pDebug
      # Tags inherited from Stack

  CloudTrailStream:
    Type: AWS::Kinesis::Stream
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  CloudTrailSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !GetAtt CloudTrailStream.Arn
      FilterPattern: "{($.userIdentity.type = AssumedRole) && ($.eventType = AwsApiCall) && ($.sourceIPAddress != *.amazonaws.com)}"
      LogGroupName: !Ref pCloudTrailLogGroupName
      RoleArn: !GetAtt LogsInvokeKinesisRole.Arn

  LogsInvokeKinesisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
            - !Sub logs.${AWS::Region}.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: KinesisPut
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - kinesis:PutRecord
            - kinesis:PutRecords
            Effect: Allow
            Resource:
              - !GetAtt CloudTrailStream.Arn

  DetectFunctionMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 20
      Enabled: True # FIXME !Ref pState
      EventSourceArn: !GetAtt CloudTrailStream.Arn
      FunctionName: !GetAtt DetectFunction.Arn
      StartingPosition: LATEST

  TriggerInventoryRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: !Sub "${AWS::StackName} Trigger gathering of IP Addresses"
      ScheduleExpression: rate(10 minutes)
      Targets:
      - Arn: !GetAtt InventoryFunction.Arn
        Id: TargetFunctionV1

  InventoryLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt InventoryFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TriggerInventoryRule.Arn
      Action: lambda:invokeFunction

Outputs:
  StackName:
    Description: Name of this Stack
    Value: !Ref AWS::StackName

  TemplateVersion:
    Description: Version of this CFT
    Value: 0.0.2